{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport echarts from 'echarts';\nimport { getNoParam, getParam, postParam } from '../../api/test';\nexport default {\n  name: \"distribution\",\n  data() {\n    return {\n      //chart1 data\n      chartData: [[\"2000-06-05\", -34], [\"2000-06-06\", -65], [\"2000-06-07\", -76], [\"2000-06-08\", 0], [\"2000-06-09\", -56], [\"2000-06-10\", 45], [\"2000-06-11\", 34], [\"2000-06-12\", 56], [\"2000-06-13\", 56], [\"2000-06-14\", 34], [\"2000-06-15\", 79], [\"2000-06-16\", 80]],\n      options: [{\n        value: 'day',\n        label: 'Day'\n      }, {\n        value: 'month',\n        label: 'Month'\n      }, {\n        value: 'week',\n        label: 'Week'\n      }],\n      interval: 'day',\n      //chart2 data\n      chartData2: [[0, 5], [0, -10], [0, -89], [0, 45], [0, 23], [1, 34], [1, 46], [1, 35], [1, -30]],\n      options2: [{\n        value: '1w',\n        label: '1 Week'\n      }, {\n        value: '2w',\n        label: '2 Weeks'\n      }, {\n        value: '1m',\n        label: '1 Month'\n      }, {\n        value: '2m',\n        label: '2 Months'\n      }, {\n        value: '3m',\n        label: '3 Months'\n      }],\n      after: '1w',\n      description: 'This is about xxx'\n    };\n  },\n  mounted() {\n    this.loadEcharts();\n  },\n  watch: {\n    chartData: function (value) {\n      this.loadEcharts();\n    }\n  },\n  methods: {\n    loadEcharts() {\n      // chart1:\n      const dateList = this.chartData.map(function (item) {\n        return item[0];\n      });\n      const valueList = this.chartData.map(function (item) {\n        return item[1];\n      });\n      const options = {\n        // Make gradient line here\n        visualMap: [{\n          show: false,\n          type: 'continuous',\n          seriesIndex: 0,\n          min: -100,\n          max: 100\n        }],\n        title: [{\n          left: 'center',\n          text: \"The Sentiment of Whole Australia Before and After the Selection\"\n        }],\n        tooltip: {\n          trigger: 'axis'\n        },\n        xAxis: [{\n          data: dateList\n        }],\n        yAxis: [{\n          min: -100,\n          max: 100\n        }],\n        grid: [{}],\n        series: [{\n          type: 'line',\n          showSymbol: true,\n          data: valueList\n        }]\n      };\n      let linechart = echarts.init(this.$refs.linechart);\n      linechart.setOption(options);\n\n      // chart2:\n      const status = ['non-changed', 'changed'];\n      const title = [];\n      const singleAxis = [];\n      const series = [];\n      status.forEach(function (sta, idx) {\n        title.push({\n          textBaseline: 'middle',\n          top: (idx + 0.5) * 100 / 2 + '%',\n          text: sta\n        });\n        singleAxis.push({\n          left: 150,\n          type: 'value',\n          min: -100,\n          max: 100,\n          boundaryGap: false,\n          top: idx * 100 / 2 + 5 + '%',\n          height: 100 / 2 - 10 + '%'\n        });\n        series.push({\n          singleAxisIndex: idx,\n          coordinateSystem: 'singleAxis',\n          type: 'scatter',\n          data: []\n        });\n      });\n      this.chartData2.forEach(function (dataItem) {\n        console.log(\"jinlaila\");\n        series[dataItem[0]].data.push([dataItem[1]]);\n      });\n      const options2 = {\n        tooltip: {\n          position: 'top'\n        },\n        title: title,\n        singleAxis: singleAxis,\n        series: series\n      };\n      let scatterchart = echarts.init(this.$refs.scatterchart);\n      scatterchart.setOption(options2);\n    },\n    handleClick() {\n      // console.log(this.sentiment)\n      // this.updateData();\n      // this.updateChart();\n    },\n    updateData() {\n      if (this.sentiment === 'positive') {\n        this.primary = 800, this.secondary = 1000, this.college = 300, this.total = 800000;\n      } else {\n        this.primary = 2800, this.secondary = 31000, this.college = 5300, this.total = 8300000;\n      }\n    },\n    updateChart() {\n      if (this.sentiment === 'all') {\n        this.chartData = [1, 2, 3, 4, 5, 6, 7];\n      } else if (this.sentiment === 'positive') {\n        this.chartData = [22, 23, 54, 65, 56, 232, 21];\n      } else {\n        this.chartData = [7, 6, 5, 4, 3, 2, 1];\n      }\n    }\n  }\n};","map":{"version":3,"names":["echarts","getNoParam","getParam","postParam","name","data","chartData","options","value","label","interval","chartData2","options2","after","description","mounted","loadEcharts","watch","methods","dateList","map","item","valueList","visualMap","show","type","seriesIndex","min","max","title","left","text","tooltip","trigger","xAxis","yAxis","grid","series","showSymbol","linechart","init","$refs","setOption","status","singleAxis","forEach","sta","idx","push","textBaseline","top","boundaryGap","height","singleAxisIndex","coordinateSystem","dataItem","console","log","position","scatterchart","handleClick","updateData","sentiment","primary","secondary","college","total","updateChart"],"sources":["src/views/dashboard/Distribution.vue"],"sourcesContent":["<template>\n    <div id=\"app\">  \n      <el-col :span=\"4\">\n         <el-menu \n            default-active=\"distribution\"\n            class=\"el-menu-vertical-demo\"\n            background-color=\"#333\"\n            text-color=\"#fff\"\n            active-text-color=\"#ffd04b\">\n            <el-menu-item index=\"distribution\">\n              \n              <span slot=\"title\">Distribution</span>\n            </el-menu-item>\n            <el-menu-item index=\"ranking\">\n              <span slot=\"title\">Ranking</span>\n            </el-menu-item>\n          </el-menu>\n      </el-col>\n      <el-col :span=\"20\" class=\"chart\">\n        <el-row class=\"scatter1\">\n          <!-- figure1 -->\n          <el-col class=\"figure\" :span=\"15\">\n            <div class=\"c\" ref=\"linechart\" ></div>\n          </el-col>\n          <el-col class=\"filter\" :span=\"6\">\n            <div class=\"filter1\"> \n                  <div class=\"filter1label\"> Interval:</div>\n                  <el-select v-model=\"interval\" >\n                  <el-option\n                    v-for=\"item in options\"\n                    :key=\"item.value\"\n                    :label=\"item.label\"\n                    :value=\"item.value\">\n                  </el-option>\n                </el-select>\n                </div>\n          </el-col>\n        </el-row>\n        <el-row class=\"scatter2\">\n          <el-col class=\"figure\" :span=\"15\">\n            <div class=\"c scatter\" ref=\"scatterchart\" ></div>\n          </el-col>\n          <el-col class=\"filter\" :span=\"6\">\n            <el-row>\n              <div class=\"filter1\"> \n                  <div class=\"filter1label\"> Time After Election:</div>\n                  <el-select v-model=\"after\" >\n                  <el-option\n                    v-for=\"item in options2\"\n                    :key=\"item.value\"\n                    :label=\"item.label\"\n                    :value=\"item.value\">\n                  </el-option>\n                </el-select>\n                </div>\n            </el-row>\n            <el-row>\n              <div class=\"description\">\n                  <div style=\"font-size:20px;font-weight:600;margin-top:10px;margin-left:10px;color:#cb7f67;\">About Figure:</div> <br/>\n                  <div style=\"margin:10px;margin-top:0px;color:#fff;\">{{description}}</div>\n              </div>\n            </el-row>\n          </el-col>\n        </el-row>\n      </el-col>\n       \n    </div>\n   \n    \n</template>\n<script>\nimport echarts from 'echarts';\nimport { getNoParam, getParam, postParam } from '../../api/test'\n\nexport default {\n  name: \"distribution\",\n  data() {\n      return {\n       //chart1 data\n        chartData: [[\"2000-06-05\", -34], [\"2000-06-06\", -65], [\"2000-06-07\", -76], [\"2000-06-08\", 0], [\"2000-06-09\", -56], [\"2000-06-10\", 45], [\"2000-06-11\", 34], [\"2000-06-12\", 56], [\"2000-06-13\", 56], [\"2000-06-14\", 34], [\"2000-06-15\", 79], [\"2000-06-16\", 80]],\n        options: [{\n          value: 'day',\n          label: 'Day'\n        }, {\n          value: 'month',\n          label: 'Month'\n        }, {\n          value: 'week',\n          label: 'Week'\n        }],\n        interval: 'day',\n\n        //chart2 data\n        chartData2 : [[0, 5], [0, -10], [0, -89], [0, 45], [0, 23], [1, 34], [1,46], [1,35], [1,-30]],\n        options2: [{\n          value: '1w',\n          label: '1 Week'\n        }, {\n          value: '2w',\n          label: '2 Weeks'\n        }, {\n          value: '1m',\n          label: '1 Month'\n        },{\n          value: '2m',\n          label: '2 Months'\n        },{\n          value: '3m',\n          label: '3 Months'\n        }\n        ],\n        after: '1w',\n        description: 'This is about xxx'\n      }\n    },\n\n  mounted() {\n    this.loadEcharts()\n  },\n  watch: {\n    chartData: function(value) {\n      this.loadEcharts()\n    }\n  },\n\n  methods: {\n\n    loadEcharts() {\n      // chart1:\n       const dateList = this.chartData.map(function (item) {\n          return item[0];\n        });\n      const valueList = this.chartData.map(function (item) {\n          return item[1];\n        });\n      const options = {\n           // Make gradient line here\n        visualMap: [\n          {\n            show: false,\n            type: 'continuous',\n            seriesIndex: 0,\n            min: -100,\n            max: 100\n          }\n        ],\n        title: [\n          {\n            left: 'center',\n            text: \"The Sentiment of Whole Australia Before and After the Selection\"\n          }\n        ],\n        tooltip: {\n          trigger: 'axis'\n        },\n        xAxis: [\n          {\n            data: dateList\n          }\n        ],\n        yAxis: [\n          {\n            min:-100,\n            max:100\n          }\n        ],\n        grid: [\n          {\n          }\n        ],\n        series: [\n          {\n            type: 'line',\n            showSymbol: true,\n            data: valueList\n          }\n        ]\n      };\n\n      let linechart = echarts.init(this.$refs.linechart)\n      linechart.setOption(options)\n      \n      // chart2:\n      const status = ['non-changed', 'changed'];\n      const title = [];\n      const singleAxis = [];\n      const series = [];\n      status.forEach(function (sta, idx) {\n      title.push({\n        textBaseline: 'middle',\n        top: ((idx + 0.5) * 100) / 2 + '%',\n        text: sta\n      });\n      singleAxis.push({\n        left: 150,\n        type: 'value',\n        min:-100,\n        max:100,\n        boundaryGap: false,\n        top: (idx * 100) / 2 + 5 + '%',\n        height: 100 / 2 - 10 + '%',\n      });\n      series.push({\n        singleAxisIndex: idx,\n        coordinateSystem: 'singleAxis',\n        type: 'scatter',\n        data: []\n        });\n      });\n      this.chartData2.forEach(function (dataItem) {\n        console.log(\"jinlaila\")\n        series[dataItem[0]].data.push([dataItem[1]]);\n      });\n      const options2= {\n        tooltip: {\n          position: 'top'\n        },\n        title: title,\n        singleAxis: singleAxis,\n        series: series\n      };\n      let scatterchart = echarts.init(this.$refs.scatterchart)\n      scatterchart.setOption(options2)\n    },\n\n    handleClick() {\n      // console.log(this.sentiment)\n      // this.updateData();\n      // this.updateChart();\n\n    },\n    updateData(){\n        if (this.sentiment==='positive'){\n             this.primary= 800,\n             this.secondary= 1000,\n             this.college= 300,\n             this.total= 800000\n        }\n        else{\n            this.primary= 2800,\n            this.secondary= 31000,\n            this.college= 5300,\n            this.total= 8300000\n        }\n    },\n   \n    updateChart() {\n        if (this.sentiment === 'all') {\n        this.chartData = [1,2,3,4,5,6,7]\n      } else if (this.sentiment === 'positive') {\n        this.chartData = [22, 23, 54,65, 56, 232, 21]\n      } else {\n        this.chartData = [7,6,5,4,3,2,1]\n      }\n    },\n  },\n};\n</script>\n<style>\n  .el-menu-vertical-demo{\n    height:100vh;\n  }\n  .scatter1{\n    height: 30em;\n    display:flex;\n    background-color: #5f4848;\n    justify-content:center;\n    align-items: center;\n    border-bottom:0.1em solid #fff;\n  }\n  .scatter2{\n    height: 30em;\n    background-color: #444a5b;\n    display:flex;\n    justify-content:center;\n    align-items: center;\n  }\n  .figure{\n    height: 80%;\n    width:65%;\n    border: 0.5em solid #cb7f67;\n    background-color: #fff;\n  }\n  .c{\n    margin: 10px;\n    height:100%;\n    width:100%;\n  }\n  .filter1{\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n  }\n  .filter1label{\n    color:#cb7f67;\n    font-weight: 600;\n    font-size: 20px;\n    margin-bottom: 10px;\n  }\n  .scatter{\n    padding-bottom: 20px;\n  }\n  .description{\n    height:220px;\n    width:90%;\n    margin-left: 30px;\n    margin-top:30px;\n    background-color:#5f4848;\n    border:0.5em solid#cb7f67;\n  }\n</style>\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}