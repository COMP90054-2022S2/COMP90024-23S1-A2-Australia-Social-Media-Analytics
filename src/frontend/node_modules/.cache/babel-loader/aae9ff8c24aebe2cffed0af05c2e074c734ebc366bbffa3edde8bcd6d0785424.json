{"ast":null,"code":"import echarts from \"echarts\";\nimport { getNoParam, getParam, postParam } from '../../api/test';\nexport default {\n  name: \"dashboard\",\n  data() {\n    return {\n      // sentiment\n      options: [{\n        options: [{\n          value: 'all',\n          label: 'All'\n        }]\n      }, {\n        options: [{\n          value: 'positive',\n          label: 'Positive'\n        }, {\n          value: 'neutral',\n          label: 'Neutral'\n        }, {\n          value: 'negative',\n          label: 'Negative'\n        }]\n      }],\n      sentiment: 'all',\n      //time\n      time: [70, 100],\n      marks: {\n        0: 'GPT-1',\n        8: 'GPT-2',\n        37: 'GPT-3',\n        50: 'GPTNeo',\n        70: {\n          style: {\n            color: '#1989FA'\n          },\n          label: this.$createElement('strong', 'GPT-3.5')\n        },\n        90: {\n          style: {\n            color: '#1989FA'\n          },\n          label: this.$createElement('strong', 'GPT-4')\n        }\n      },\n      //figure\n      primary: 500000,\n      secondary: 30000,\n      college: 200000,\n      total: 10000000,\n      //chart\n      chart: {},\n      chartData: [5, 20, 36, 10, 10, 20]\n    };\n  },\n  mounted() {\n    // this.chart = echarts.init(this.$refs.chart);\n    // this.updateChart();\n    this.loadEcharts();\n  },\n  watch: {\n    chartData: function (value) {\n      this.loadEcharts();\n    }\n  },\n  methods: {\n    loadEcharts() {\n      // chart1:\n      const options = {\n        xAxis: {\n          type: 'category',\n          data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\n        },\n        yAxis: {\n          type: 'value'\n        },\n        series: [{\n          data: this.chartData,\n          type: 'line'\n        }]\n      };\n      //chart2:\n      const options2 = {\n        tooltip: {\n          trigger: 'axis',\n          axisPointer: {\n            // Use axis to trigger tooltip\n            type: 'shadow' // 'shadow' as default; can also be 'line' or 'shadow'\n          }\n        },\n\n        legend: {},\n        grid: {\n          left: '3%',\n          right: '4%',\n          bottom: '3%',\n          containLabel: true\n        },\n        xAxis: {\n          type: 'value'\n        },\n        yAxis: {\n          type: 'category',\n          data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\n        },\n        series: [{\n          name: 'Direct',\n          type: 'bar',\n          stack: 'total',\n          label: {\n            show: true\n          },\n          emphasis: {\n            focus: 'series'\n          },\n          data: [320, 302, 301, 334, 390, 330, 320]\n        }, {\n          name: 'Mail Ad',\n          type: 'bar',\n          stack: 'total',\n          label: {\n            show: true\n          },\n          emphasis: {\n            focus: 'series'\n          },\n          data: [120, 132, 101, 134, 90, 230, 210]\n        }, {\n          name: 'Affiliate Ad',\n          type: 'bar',\n          stack: 'total',\n          label: {\n            show: true\n          },\n          emphasis: {\n            focus: 'series'\n          },\n          data: [220, 182, 191, 234, 290, 330, 310]\n        }, {\n          name: 'Video Ad',\n          type: 'bar',\n          stack: 'total',\n          label: {\n            show: true\n          },\n          emphasis: {\n            focus: 'series'\n          },\n          data: [150, 212, 201, 154, 190, 330, 410]\n        }, {\n          name: 'Search Engine',\n          type: 'bar',\n          stack: 'total',\n          label: {\n            show: true\n          },\n          emphasis: {\n            focus: 'series'\n          },\n          data: [820, 832, 901, 934, 1290, 1330, 1320]\n        }]\n      };\n      let mychart = echarts.init(this.$refs.chart);\n      mychart.setOption(options);\n      let mychart2 = echarts.init(this.$refs.chart2);\n      mychart2.setOption(options2);\n    },\n    handleClick() {\n      console.log(this.sentiment);\n      this.updateData();\n      this.updateChart();\n\n      // getNoParam().then((res) => {\n      // res就是返回结果\n      // 所有的处理都在这里进行\n      //  this.updateData();\n\n      // })\n\n      // 前面的name对应的是后端实体类的属性，后面的'name'对应的是想要传递到后端到值\n      // postParam({name: this.value, age: 12}).then((res) => {\n      //   this.method2()\n      // })\n    },\n\n    updateData() {\n      if (this.sentiment === 'positive') {\n        this.primary = 800, this.secondary = 1000, this.college = 300, this.total = 800000;\n      } else {\n        this.primary = 2800, this.secondary = 31000, this.college = 5300, this.total = 8300000;\n      }\n    },\n    updateChart() {\n      if (this.sentiment === 'all') {\n        this.chartData = [1, 2, 3, 4, 5, 6, 7];\n      } else if (this.sentiment === 'positive') {\n        this.chartData = [22, 23, 54, 65, 56, 232, 21];\n      } else {\n        this.chartData = [7, 6, 5, 4, 3, 2, 1];\n      }\n    }\n  }\n};","map":{"version":3,"names":["echarts","getNoParam","getParam","postParam","name","data","options","value","label","sentiment","time","marks","style","color","$createElement","primary","secondary","college","total","chart","chartData","mounted","loadEcharts","watch","methods","xAxis","type","yAxis","series","options2","tooltip","trigger","axisPointer","legend","grid","left","right","bottom","containLabel","stack","show","emphasis","focus","mychart","init","$refs","setOption","mychart2","chart2","handleClick","console","log","updateData","updateChart"],"sources":["src/views/dashboard/GDashboard.vue"],"sourcesContent":["<template>\n    <div id=\"app\">  \n        <!-- 1. filter -->\n        <div class=\"filter\">\n                <div class=\"sentiment\"> \n                    <div class=\"senlabel\"> Sentiment:</div>\n                    <el-select v-model=\"sentiment\" :change=\"handleClick()\">\n                        <el-option-group\n                            v-for=\"group in options\"\n                            :key=\"group.label\"\n                            :label=\"group.label\">\n                            <el-option\n                                v-for=\"item in group.options\"\n                                :key=\"item.value\"\n                                :label=\"item.label\"\n                                :value=\"item.value\">\n                            </el-option>\n                        </el-option-group>\n                    </el-select>\n                </div>\n            <div class=\"time\">\n                 <el-slider \n                    v-model=\"time\"\n                    range\n                    :marks=\"marks\">\n                </el-slider>\n            </div>\n            \n        </div>\n        <!-- 2. display directly data -->\n        <div class=\"figure\">\n            <div class=\"f\">\n                <div class=\"ftitle\">Primary School:</div>\n                <div class=\"fdata\">{{primary}}</div>\n            </div>\n            <div class=\"f\">\n                <div class=\"ftitle\">Secondary School:</div>\n                <div class=\"fdata\">{{secondary}}</div>\n            </div>\n            <div class=\"f\">\n                <div class=\"ftitle\">College:</div>\n                <div class=\"fdata\">{{college}}</div>\n            </div>\n            <div class=\"f\">\n                <div class=\"ftitle\">Total:</div>\n                <div class=\"fdata\">{{total}}</div>\n            </div>\n        </div>\n        <!-- 3. figure-->\n        <div class=\"chart\">\n            <div class=\"c\" ref=\"chart\" ></div>\n            <div class=\"c\" ref=\"chart2\"></div>\n        </div>\n    </div>\n   \n    \n</template>\n<script>\nimport echarts from \"echarts\"\nimport { getNoParam, getParam, postParam } from '../../api/test'\n\nexport default {\n  name: \"dashboard\",\n\n  data() {\n      return {\n        // sentiment\n        options: [\n       {\n          options: [{\n            value: 'all',\n            label: 'All'\n          }]\n        },\n        {\n          options: [\n            {\n              value: 'positive',\n              label: 'Positive'\n            },\n            {\n              value: 'neutral',\n              label: 'Neutral'\n            },\n            {\n              value: 'negative',\n              label: 'Negative'\n            }\n          ]\n        }\n      ],\n        sentiment: 'all',\n        //time\n        time: [70, 100],\n        marks: {\n          0: 'GPT-1',\n          8: 'GPT-2',\n          37: 'GPT-3',\n          50: 'GPTNeo',\n          70: {\n            style: {\n              color: '#1989FA'\n            },\n            label: this.$createElement('strong', 'GPT-3.5')\n          },\n          90:{\n            style: {\n              color: '#1989FA'\n            },\n            label: this.$createElement('strong', 'GPT-4')\n          }\n        },\n        //figure\n        primary: 500000,\n        secondary: 30000,\n        college: 200000,\n        total: 10000000,\n        //chart\n        chart: {},\n        chartData: [5, 20, 36, 10, 10, 20]\n\n      }\n    },\n\n  mounted() {\n    // this.chart = echarts.init(this.$refs.chart);\n    // this.updateChart();\n    this.loadEcharts()\n  },\n  watch: {\n    chartData: function(value) {\n      this.loadEcharts()\n    }\n  },\n\n  methods: {\n    loadEcharts() {\n      // chart1:\n        const options = {\n          xAxis: {\n          type: 'category',\n          data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\n        },\n        yAxis: {\n          type: 'value'\n        },\n        series: [\n          {\n            data: this.chartData,\n            type: 'line'\n          }\n        ]\n      };\n    //chart2:\n      const options2 = {\n      tooltip: {\n        trigger: 'axis',\n        axisPointer: {\n          // Use axis to trigger tooltip\n          type: 'shadow' // 'shadow' as default; can also be 'line' or 'shadow'\n        }\n      },\n      legend: {},\n      grid: {\n        left: '3%',\n        right: '4%',\n        bottom: '3%',\n        containLabel: true\n      },\n      xAxis: {\n        type: 'value'\n      },\n      yAxis: {\n        type: 'category',\n        data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\n      },\n      series: [\n        {\n          name: 'Direct',\n          type: 'bar',\n          stack: 'total',\n          label: {\n            show: true\n          },\n          emphasis: {\n            focus: 'series'\n          },\n          data: [320, 302, 301, 334, 390, 330, 320]\n        },\n        {\n          name: 'Mail Ad',\n          type: 'bar',\n          stack: 'total',\n          label: {\n            show: true\n          },\n          emphasis: {\n            focus: 'series'\n          },\n          data: [120, 132, 101, 134, 90, 230, 210]\n        },\n        {\n          name: 'Affiliate Ad',\n          type: 'bar',\n          stack: 'total',\n          label: {\n            show: true\n          },\n          emphasis: {\n            focus: 'series'\n          },\n          data: [220, 182, 191, 234, 290, 330, 310]\n        },\n        {\n          name: 'Video Ad',\n          type: 'bar',\n          stack: 'total',\n          label: {\n            show: true\n          },\n          emphasis: {\n            focus: 'series'\n          },\n          data: [150, 212, 201, 154, 190, 330, 410]\n        },\n        {\n          name: 'Search Engine',\n          type: 'bar',\n          stack: 'total',\n          label: {\n            show: true\n          },\n          emphasis: {\n            focus: 'series'\n          },\n          data: [820, 832, 901, 934, 1290, 1330, 1320]\n        }\n      ]\n    };\n      let mychart = echarts.init(this.$refs.chart)\n      mychart.setOption(options)\n      let mychart2 = echarts.init(this.$refs.chart2)\n      mychart2.setOption(options2)\n    },\n\n    handleClick() {\n      console.log(this.sentiment)\n      this.updateData();\n      this.updateChart();\n      \n      // getNoParam().then((res) => {\n        // res就是返回结果\n        // 所有的处理都在这里进行\n        //  this.updateData();\n         \n      // })\n\n      // 前面的name对应的是后端实体类的属性，后面的'name'对应的是想要传递到后端到值\n      // postParam({name: this.value, age: 12}).then((res) => {\n        //   this.method2()\n      // })\n    },\n    updateData(){\n        if (this.sentiment==='positive'){\n             this.primary= 800,\n             this.secondary= 1000,\n             this.college= 300,\n             this.total= 800000\n        }\n        else{\n            this.primary= 2800,\n            this.secondary= 31000,\n            this.college= 5300,\n            this.total= 8300000\n        }\n    },\n   \n    updateChart() {\n        if (this.sentiment === 'all') {\n        this.chartData = [1,2,3,4,5,6,7]\n      } else if (this.sentiment === 'positive') {\n        this.chartData = [22, 23, 54,65, 56, 232, 21]\n      } else {\n        this.chartData = [7,6,5,4,3,2,1]\n      }\n    },\n  },\n};\n</script>\n<style>\n    #app{\n        display:flex;\n        flex-direction: column;\n        background-color: #3e3e3e;\n    }\n    .filter{\n        flex:1;\n        display: flex;\n        padding-block: 10px 10px ;\n        padding-left: 150px;\n        padding-right:150px;\n\n    }\n    .filter .sentiment{\n        flex: 3;\n        margin-right: 10px;\n        display: flex;\n        align-items: center;\n \n    }\n    .filter .sentiment .senlabel{\n        font-weight:bold;\n        margin-right: 30px;\n        color: #409EFF;\n    }\n    .filter .time{\n        flex: 6;\n        margin-left:10px;\n        text-align: center;\n        margin: auto;\n    }\n\n    .figure{\n        flex: 2;\n        padding-left: 150px;\n        padding-right:150px;\n        display: flex;\n    }\n    .figure .f{\n        flex: 1;\n        margin: 2%;\n        background-color: #fff;\n        display: flex;\n        flex-direction: column;\n    }\n    .figure .f .ftitle{\n        flex: 2;\n        font-weight: 500;\n        font-size: 23px;\n        margin-left:30px;\n        display: flex;\n        align-items:flex-end;\n\n    }\n    .figure .f .fdata{\n        flex: 3;\n        display:flex;\n        justify-content: center;\n        align-items: center;\n        font-size: 40px;\n        font-weight: 600;\n        color: #409EFF;\n    }\n    .chart{\n        flex:4;\n        padding-left: 150px;\n        padding-right:150px;\n        display: flex;\n    }\n    .chart .c{\n        flex: 1;\n        margin: 2%;\n        background-color: #fff;\n    }\n    \n</style>\n\n"],"mappings":"AA0DA,OAAAA,OAAA;AACA,SAAAC,UAAA,EAAAC,QAAA,EAAAC,SAAA;AAEA;EACAC,IAAA;EAEAC,KAAA;IACA;MACA;MACAC,OAAA,GACA;QACAA,OAAA;UACAC,KAAA;UACAC,KAAA;QACA;MACA,GACA;QACAF,OAAA,GACA;UACAC,KAAA;UACAC,KAAA;QACA,GACA;UACAD,KAAA;UACAC,KAAA;QACA,GACA;UACAD,KAAA;UACAC,KAAA;QACA;MAEA,EACA;MACAC,SAAA;MACA;MACAC,IAAA;MACAC,KAAA;QACA;QACA;QACA;QACA;QACA;UACAC,KAAA;YACAC,KAAA;UACA;UACAL,KAAA,OAAAM,cAAA;QACA;QACA;UACAF,KAAA;YACAC,KAAA;UACA;UACAL,KAAA,OAAAM,cAAA;QACA;MACA;MACA;MACAC,OAAA;MACAC,SAAA;MACAC,OAAA;MACAC,KAAA;MACA;MACAC,KAAA;MACAC,SAAA;IAEA;EACA;EAEAC,QAAA;IACA;IACA;IACA,KAAAC,WAAA;EACA;EACAC,KAAA;IACAH,SAAA,WAAAA,CAAAb,KAAA;MACA,KAAAe,WAAA;IACA;EACA;EAEAE,OAAA;IACAF,YAAA;MACA;MACA,MAAAhB,OAAA;QACAmB,KAAA;UACAC,IAAA;UACArB,IAAA;QACA;QACAsB,KAAA;UACAD,IAAA;QACA;QACAE,MAAA,GACA;UACAvB,IAAA,OAAAe,SAAA;UACAM,IAAA;QACA;MAEA;MACA;MACA,MAAAG,QAAA;QACAC,OAAA;UACAC,OAAA;UACAC,WAAA;YACA;YACAN,IAAA;UACA;QACA;;QACAO,MAAA;QACAC,IAAA;UACAC,IAAA;UACAC,KAAA;UACAC,MAAA;UACAC,YAAA;QACA;QACAb,KAAA;UACAC,IAAA;QACA;QACAC,KAAA;UACAD,IAAA;UACArB,IAAA;QACA;QACAuB,MAAA,GACA;UACAxB,IAAA;UACAsB,IAAA;UACAa,KAAA;UACA/B,KAAA;YACAgC,IAAA;UACA;UACAC,QAAA;YACAC,KAAA;UACA;UACArC,IAAA;QACA,GACA;UACAD,IAAA;UACAsB,IAAA;UACAa,KAAA;UACA/B,KAAA;YACAgC,IAAA;UACA;UACAC,QAAA;YACAC,KAAA;UACA;UACArC,IAAA;QACA,GACA;UACAD,IAAA;UACAsB,IAAA;UACAa,KAAA;UACA/B,KAAA;YACAgC,IAAA;UACA;UACAC,QAAA;YACAC,KAAA;UACA;UACArC,IAAA;QACA,GACA;UACAD,IAAA;UACAsB,IAAA;UACAa,KAAA;UACA/B,KAAA;YACAgC,IAAA;UACA;UACAC,QAAA;YACAC,KAAA;UACA;UACArC,IAAA;QACA,GACA;UACAD,IAAA;UACAsB,IAAA;UACAa,KAAA;UACA/B,KAAA;YACAgC,IAAA;UACA;UACAC,QAAA;YACAC,KAAA;UACA;UACArC,IAAA;QACA;MAEA;MACA,IAAAsC,OAAA,GAAA3C,OAAA,CAAA4C,IAAA,MAAAC,KAAA,CAAA1B,KAAA;MACAwB,OAAA,CAAAG,SAAA,CAAAxC,OAAA;MACA,IAAAyC,QAAA,GAAA/C,OAAA,CAAA4C,IAAA,MAAAC,KAAA,CAAAG,MAAA;MACAD,QAAA,CAAAD,SAAA,CAAAjB,QAAA;IACA;IAEAoB,YAAA;MACAC,OAAA,CAAAC,GAAA,MAAA1C,SAAA;MACA,KAAA2C,UAAA;MACA,KAAAC,WAAA;;MAEA;MACA;MACA;MACA;;MAEA;;MAEA;MACA;MACA;MACA;IACA;;IACAD,WAAA;MACA,SAAA3C,SAAA;QACA,KAAAM,OAAA,QACA,KAAAC,SAAA,SACA,KAAAC,OAAA,QACA,KAAAC,KAAA;MACA,OACA;QACA,KAAAH,OAAA,SACA,KAAAC,SAAA,UACA,KAAAC,OAAA,SACA,KAAAC,KAAA;MACA;IACA;IAEAmC,YAAA;MACA,SAAA5C,SAAA;QACA,KAAAW,SAAA;MACA,gBAAAX,SAAA;QACA,KAAAW,SAAA;MACA;QACA,KAAAA,SAAA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}