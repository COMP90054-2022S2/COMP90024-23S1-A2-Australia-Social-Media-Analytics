{"ast":null,"code":"import echarts from 'echarts';\nimport { getNoParam, getParam, postParam } from '../../api/test';\nexport default {\n  name: \"distribution\",\n  data() {\n    return {\n      //chart1 data\n      chartData: [[\"2000-06-05\", -34], [\"2000-06-06\", -65], [\"2000-06-07\", -76], [\"2000-06-08\", 0], [\"2000-06-09\", -56], [\"2000-06-10\", 45], [\"2000-06-11\", 34], [\"2000-06-12\", 56], [\"2000-06-13\", 56], [\"2000-06-14\", 34], [\"2000-06-15\", 79], [\"2000-06-16\", 80]],\n      options: [{\n        value: 'day',\n        label: 'Day'\n      }, {\n        value: 'month',\n        label: 'Month'\n      }, {\n        value: 'week',\n        label: 'Week'\n      }],\n      interval: 'day'\n    };\n  },\n  mounted() {\n    this.loadEcharts();\n  },\n  watch: {\n    chartData: function (value) {\n      this.loadEcharts();\n    }\n  },\n  methods: {\n    loadEcharts() {\n      // chart1:\n      const dateList = this.chartData.map(function (item) {\n        return item[0];\n      });\n      const valueList = this.chartData.map(function (item) {\n        return item[1];\n      });\n      const options = {\n        // Make gradient line here\n        visualMap: [{\n          show: false,\n          type: 'continuous',\n          seriesIndex: 0,\n          min: -100,\n          max: 100\n        }],\n        title: [{\n          left: 'center',\n          text: \"The Sentiment of Whole Australia Before and After the Selection\"\n        }],\n        tooltip: {\n          trigger: 'axis'\n        },\n        xAxis: [{\n          data: dateList\n        }],\n        yAxis: [{\n          min: -100,\n          max: 100\n        }],\n        grid: [{}],\n        series: [{\n          type: 'line',\n          showSymbol: true,\n          data: valueList\n        }]\n      };\n      let linechart = echarts.init(this.$refs.linechart);\n      linechart.setOption(options);\n      // let mychart2 = echarts.init(this.$refs.chart2)\n      // mychart2.setOption(options2)\n    },\n\n    handleClick() {\n      // console.log(this.sentiment)\n      // this.updateData();\n      // this.updateChart();\n    },\n    updateData() {\n      if (this.sentiment === 'positive') {\n        this.primary = 800, this.secondary = 1000, this.college = 300, this.total = 800000;\n      } else {\n        this.primary = 2800, this.secondary = 31000, this.college = 5300, this.total = 8300000;\n      }\n    },\n    updateChart() {\n      if (this.sentiment === 'all') {\n        this.chartData = [1, 2, 3, 4, 5, 6, 7];\n      } else if (this.sentiment === 'positive') {\n        this.chartData = [22, 23, 54, 65, 56, 232, 21];\n      } else {\n        this.chartData = [7, 6, 5, 4, 3, 2, 1];\n      }\n    }\n  }\n};","map":{"version":3,"names":["echarts","getNoParam","getParam","postParam","name","data","chartData","options","value","label","interval","mounted","loadEcharts","watch","methods","dateList","map","item","valueList","visualMap","show","type","seriesIndex","min","max","title","left","text","tooltip","trigger","xAxis","yAxis","grid","series","showSymbol","linechart","init","$refs","setOption","handleClick","updateData","sentiment","primary","secondary","college","total","updateChart"],"sources":["src/views/dashboard/Distribution.vue"],"sourcesContent":["<template>\n    <div id=\"app\">  \n      <el-col :span=\"4\">\n         <el-menu \n            default-active=\"distribution\"\n            class=\"el-menu-vertical-demo\"\n            background-color=\"#333\"\n            text-color=\"#fff\"\n            active-text-color=\"#ffd04b\">\n            <el-menu-item index=\"distribution\">\n              \n              <span slot=\"title\">Distribution</span>\n            </el-menu-item>\n            <el-menu-item index=\"ranking\">\n              <span slot=\"title\">Ranking</span>\n            </el-menu-item>\n          </el-menu>\n      </el-col>\n      <el-col :span=\"20\" class=\"chart\">\n        <el-row class=\"scatter1\">\n          <!-- figure1 -->\n          <el-col class=\"figure\" :span=\"15\">\n            <div class=\"c\" ref=\"linechart\" ></div>\n          </el-col>\n          <el-col class=\"filter\" :span=\"5\">\n            <div class=\"filter1\"> \n                  <div class=\"filter1label\"> Interval:</div>\n                  <el-select v-model=\"interval\" >\n                  <el-option\n                    v-for=\"item in options\"\n                    :key=\"item.value\"\n                    :label=\"item.label\"\n                    :value=\"item.value\">\n                  </el-option>\n                </el-select>\n                </div>\n          </el-col>\n        </el-row>\n        <el-row class=\"scatter2\">\n          <el-col class=\"figure\" :span=\"15\">\n            <div class=\"c\" ref=\"scatterchart\" ></div>\n          </el-col>\n          <el-col class=\"filter\" :span=\"5\"></el-col>\n        </el-row>\n      </el-col>\n       \n    </div>\n   \n    \n</template>\n<script>\nimport echarts from 'echarts';\nimport { getNoParam, getParam, postParam } from '../../api/test'\n\nexport default {\n  name: \"distribution\",\n  data() {\n      return {\n       //chart1 data\n        chartData: [[\"2000-06-05\", -34], [\"2000-06-06\", -65], [\"2000-06-07\", -76], [\"2000-06-08\", 0], [\"2000-06-09\", -56], [\"2000-06-10\", 45], [\"2000-06-11\", 34], [\"2000-06-12\", 56], [\"2000-06-13\", 56], [\"2000-06-14\", 34], [\"2000-06-15\", 79], [\"2000-06-16\", 80]],\n        options: [{\n          value: 'day',\n          label: 'Day'\n        }, {\n          value: 'month',\n          label: 'Month'\n        }, {\n          value: 'week',\n          label: 'Week'\n        }],\n        interval: 'day'\n      }\n    },\n\n  mounted() {\n    this.loadEcharts()\n  },\n  watch: {\n    chartData: function(value) {\n      this.loadEcharts()\n    }\n  },\n\n  methods: {\n\n    loadEcharts() {\n      // chart1:\n       const dateList = this.chartData.map(function (item) {\n          return item[0];\n        });\n      const valueList = this.chartData.map(function (item) {\n          return item[1];\n        });\n      const options = {\n           // Make gradient line here\n        visualMap: [\n          {\n            show: false,\n            type: 'continuous',\n            seriesIndex: 0,\n            min: -100,\n            max: 100\n          }\n        ],\n        title: [\n          {\n            left: 'center',\n            text: \"The Sentiment of Whole Australia Before and After the Selection\"\n          }\n        ],\n        tooltip: {\n          trigger: 'axis'\n        },\n        xAxis: [\n          {\n            data: dateList\n          }\n        ],\n        yAxis: [\n          {\n            min:-100,\n            max:100\n          }\n        ],\n        grid: [\n          {\n          }\n        ],\n        series: [\n          {\n            type: 'line',\n            showSymbol: true,\n            data: valueList\n          }\n        ]\n      };\n\n      let linechart = echarts.init(this.$refs.linechart)\n      linechart.setOption(options)\n      // let mychart2 = echarts.init(this.$refs.chart2)\n      // mychart2.setOption(options2)\n    },\n\n    handleClick() {\n      // console.log(this.sentiment)\n      // this.updateData();\n      // this.updateChart();\n\n    },\n    updateData(){\n        if (this.sentiment==='positive'){\n             this.primary= 800,\n             this.secondary= 1000,\n             this.college= 300,\n             this.total= 800000\n        }\n        else{\n            this.primary= 2800,\n            this.secondary= 31000,\n            this.college= 5300,\n            this.total= 8300000\n        }\n    },\n   \n    updateChart() {\n        if (this.sentiment === 'all') {\n        this.chartData = [1,2,3,4,5,6,7]\n      } else if (this.sentiment === 'positive') {\n        this.chartData = [22, 23, 54,65, 56, 232, 21]\n      } else {\n        this.chartData = [7,6,5,4,3,2,1]\n      }\n    },\n  },\n};\n</script>\n<style>\n  .el-menu-vertical-demo{\n    height:100vh;\n  }\n  .scatter1{\n    height: 30em;\n    display:flex;\n    background-color: #8c5252;\n    justify-content:center;\n    align-items: center;\n    border-bottom:0.1em solid #fff;\n  }\n  .scatter2{\n    height: 30em;\n    background-color: #535e7f;\n    display:flex;\n    justify-content:center;\n    align-items: center;\n  }\n  .figure{\n    height: 80%;\n    width:65%;\n    border: 0.5em solid #cb7f67;\n    background-color: #fff;\n  }\n  .c{\n    margin-top: 10px;\n    height:100%;\n    width:100%;\n  }\n  .filter1{\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n  }\n  .filter1label{\n    color:#ffd04b;\n    font-weight: 600;\n    font-size: 20px;\n    margin-bottom: 10px;\n  }\n</style>\n\n"],"mappings":"AAmDA,OAAAA,OAAA;AACA,SAAAC,UAAA,EAAAC,QAAA,EAAAC,SAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACA;MACAC,SAAA;MACAC,OAAA;QACAC,KAAA;QACAC,KAAA;MACA;QACAD,KAAA;QACAC,KAAA;MACA;QACAD,KAAA;QACAC,KAAA;MACA;MACAC,QAAA;IACA;EACA;EAEAC,QAAA;IACA,KAAAC,WAAA;EACA;EACAC,KAAA;IACAP,SAAA,WAAAA,CAAAE,KAAA;MACA,KAAAI,WAAA;IACA;EACA;EAEAE,OAAA;IAEAF,YAAA;MACA;MACA,MAAAG,QAAA,QAAAT,SAAA,CAAAU,GAAA,WAAAC,IAAA;QACA,OAAAA,IAAA;MACA;MACA,MAAAC,SAAA,QAAAZ,SAAA,CAAAU,GAAA,WAAAC,IAAA;QACA,OAAAA,IAAA;MACA;MACA,MAAAV,OAAA;QACA;QACAY,SAAA,GACA;UACAC,IAAA;UACAC,IAAA;UACAC,WAAA;UACAC,GAAA;UACAC,GAAA;QACA,EACA;QACAC,KAAA,GACA;UACAC,IAAA;UACAC,IAAA;QACA,EACA;QACAC,OAAA;UACAC,OAAA;QACA;QACAC,KAAA,GACA;UACAzB,IAAA,EAAAU;QACA,EACA;QACAgB,KAAA,GACA;UACAR,GAAA;UACAC,GAAA;QACA,EACA;QACAQ,IAAA,GACA,CACA,EACA;QACAC,MAAA,GACA;UACAZ,IAAA;UACAa,UAAA;UACA7B,IAAA,EAAAa;QACA;MAEA;MAEA,IAAAiB,SAAA,GAAAnC,OAAA,CAAAoC,IAAA,MAAAC,KAAA,CAAAF,SAAA;MACAA,SAAA,CAAAG,SAAA,CAAA/B,OAAA;MACA;MACA;IACA;;IAEAgC,YAAA;MACA;MACA;MACA;IAAA,CAEA;IACAC,WAAA;MACA,SAAAC,SAAA;QACA,KAAAC,OAAA,QACA,KAAAC,SAAA,SACA,KAAAC,OAAA,QACA,KAAAC,KAAA;MACA,OACA;QACA,KAAAH,OAAA,SACA,KAAAC,SAAA,UACA,KAAAC,OAAA,SACA,KAAAC,KAAA;MACA;IACA;IAEAC,YAAA;MACA,SAAAL,SAAA;QACA,KAAAnC,SAAA;MACA,gBAAAmC,SAAA;QACA,KAAAnC,SAAA;MACA;QACA,KAAAA,SAAA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}